~~~~~ 
What happens when you initialize a repository? Why do you need to do it?

An empty repository is created for that folder and its subfolders. 
~~~~~

~~~~~  
How is the staging area different from the working directory and the repository? What value do you think offers?

The staging area includes files from the working directory that you identify as being ready to commit to the repository.  The value is that it gives the user control over exactly what files are commited to the repository for a single commit. This flexibility allows the user to only commit changes that are logically related to each other.
~~~~~

~~~~~
How can you use the staging area to make sure you have one commit per logical change?

You can add only the files that have been changed in a logical way to the staging area before commiting them.  You can also use the git diff command either with no arguments or with --staged argument to verify that all of your changes are as expected, both compared to the files in the working directory and the files in the most recent commit.  These comparisons can help you verify that the changes being commited together do fit together logically.
~~~~~

~~~~~
What are some situations when branches would be helpful in keeping your history organized?  How would branches help?

Branches can be helpful when a new feature is being added to a program or when a different version of the program is to be created.  In the first example, that branch would likely be merged with the master eventually, but if the feature is complicated, it may take some time before it is ready for merging.
~~~~~

~~~~~
How do the diagrams help you visualize the branch structure?

The diagrams directly show the branch structure, including what commits are on each branch and what commits are reachable to each branch.
~~~~~

~~~~~
What is the result of merging the two branches together? Why do we represent it in the diagram the way we do?

The merge results in the combination of the changes from both branches. It is represented in the diagram the way it is to indicate that the changes from all of the commits on both branches are in the resulting merged branch.
~~~~~